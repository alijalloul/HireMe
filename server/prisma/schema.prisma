// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  email          String  @unique
  password       String
  name           String
  accountType    String
  telephone      String?
  address        String?
  image          String?
  introduction   String?
  profession     String?
  language       Json[]
  education      Json[]
  workExperience Json[]
  pushToken      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  JobPost              JobPost[]
  employeeApplications Application[] @relation("employee")
  employerJobs         Application[] @relation("employer")
}

model JobPost {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  company            String
  location           String
  country            String
  category           String
  skills             String[]
  experienceRequired String?
  type               String?
  description        String?
  status             String   @default("pending")
  employerId         String   @db.ObjectId
  employer           User     @relation(fields: [employerId], references: [id])

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Application Application[]
}

model Application {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  jobId       String @db.ObjectId
  employeeId  String @db.ObjectId
  employerId  String @db.ObjectId
  status      String @default("pending")
  coverLetter String

  job      JobPost @relation(fields: [jobId], references: [id])
  employee User    @relation("employee", fields: [employeeId], references: [id])
  employer User    @relation("employer", fields: [employerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([employeeId, employerId, jobId])
}
